---
# load the variables in hierachical order
- name: load default vars
  ansible.builtin.include_vars:
    file: default.yml

# - name: load os specific vars
#   ansible.builtin.include_vars:
#     file: "{{ ansible_system | lower }}.yaml"

# variables checking
- name: verify shell type
  ansible.builtin.fail:
    msg: "{{ shell_type }} is not supported"
  when: shell_type not in ['bash', 'zsh']

- name: verify shell theme
  ansible.builtin.fail:
    msg: "{{ shell_theme }} is not supported"
  when:
    - shell_theme
    - shell_theme not in ['pure']

- name: verify shell installation
  block:
    - name: check shell binary path
      ansible.builtin.stat:
        path: "{{ shell_binary }}"
      register: check_shell_binary

    - name: fail if shell binary does not exist
      ansible.builtin.fail:
        msg: "{{ shell_binary }} does not exists"
      when: not check_shell_binary.stat.exists

- name: set user shell
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    shell: "{{ shell_binary }}"

- name: create the necessary directories in user home
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ ansible_env.HOME }}/bin"
    - "{{ ansible_env.HOME }}/tmp"
    - "{{ ansible_env.HOME }}/{{ shell_type }}"

# configure the shell type
- ansible.builtin.include_tasks: "{{ shell_type }}/configure.yml"

# set paths
- ansible.builtin.set_fact:
    shell_extra_paths: "{{ shell_extra_paths + [ansible_env.HOME + '/bin'] }}"
  when: ansible_env.HOME + '/bin' not in shell_extra_paths

- name: configure fzf
  ansible.builtin.include_tasks: fzf.yml
  when: enable_fzf
